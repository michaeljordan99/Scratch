@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Knockout Example 2</h2>

<!-- This is a *view* - HTML markup that defines the appearance of your UI -->

<h2>Your seat reservations (<span data-bind="text: seats().length"></span>)</h2>


<table>
    <thead><tr>
        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>
    </tr></thead>
    <!-- Todo: Generate table body -->
    <tbody data-bind="foreach: seats">
        <td><input data-bind="value: name" /></td>
        <td><select data-bind="options: $root.availableMeals, value: meal, optionsText: 'Name'"></select></td>
        <td data-bind="text: formattedPrice"></td>
        <td><a href="#" data-bind="click: $root.removeSeat">Remove</a></td>
    </tbody>
</table>  
<br />
<button data-bind="click: addSeat, enable: seats().length < 5">Reserve another seat</button>
<br />
<h3 data-bind="visible: totalSurcharge() > 0">
    Total surcharge: $<span data-bind="text: totalSurcharge().toFixed(2)"></span>
</h3>

<script type="text/javascript">

    // Class to represent a row in the seat reservations grid
    function SeatReservation(name, initialMeal) {
        var self = this;
        self.name = name;
        self.meal = ko.observable(initialMeal);

        self.formattedPrice = ko.computed(function () {
            var price = self.meal().Price;
            return price ? "$" + price.toFixed(2) : "None";
        });
    }

    // Overall viewmodel for this screen, along with initial state
    function ReservationsViewModel() {
        var self = this;

        //Ajax call to populate AvailableMeals.
        self.availableMeals = getAvailableMeals();

        // Editable data
        self.seats = ko.observableArray([
            new SeatReservation("Steve", self.availableMeals[0]),
            new SeatReservation("Bert", self.availableMeals[1])
        ]);

        // Operations
        self.addSeat = function () {
            self.seats.push(new SeatReservation("", self.availableMeals[0]));
        }

        self.removeSeat = function (seat) { self.seats.remove(seat) }

        self.totalSurcharge = ko.computed(function () {

            var total = 0;
            for (var i = 0; i < self.seats().length; i++)
                total += self.seats()[i].meal().Price;
            return total;
        });
    }

    ko.applyBindings(new ReservationsViewModel());

    function getAvailableMeals() {

        var availableMeals;

        $.ajax({
            url: "/Knockout/AvailableMeals/1",
            context: document.body,
            async: false,
            success: function (data) {
                availableMeals = data;
            }
        });

        return availableMeals;
    }

</script>